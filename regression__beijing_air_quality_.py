# -*- coding: utf-8 -*-
"""rc__regression__beijing_air_quality__solutions_transformation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vW-y1LjKYAP0UQ8rTSJkZp8YvGY3bRwt

# Beijing Air Quality
"""

import pandas as pd
import warnings
from copy import deepcopy
import os
from datetime import datetime
import joypy
from plotnine import *
warnings.filterwarnings('ignore')

"""![beijin](https://github.com/frandiego/images/blob/master/beijing_pollution.jpg?raw=true)

## 1. Data

The data has informationof the Air Quality of Beijing between 2010-01-01 and 2014-12-31

**Attribute Information**:

* **No**: row number
* **year**: year of data in this row
* **month**: month of data in this row
* **day**: day of data in this row
* **hour**: hour of data in this row
* **pm2.5**: PM2.5 concentration (ug/m^3)
* **DEWP**: Dew Point (â„ƒ)
* **TEMP**: Temperature (â„ƒ)
* **PRES**: Pressure (hPa)
* **cbwd**: Combined wind direction
* **Iws**: Cumulated wind speed (m/s)
* **Is**: Cumulated hours of snow
* **Ir**: Cumulated hours of rain


**target**

The target is the variable PM2.5 which refers to atmospheric particulate matter (PM) that have a diameter of less than 2.5 micrometers, which is about 3% the diameter of a human hair.

[Here](https://aqicn.org/map/madrid/) we can check the pm2.5 in Madrid

# 1. Import data
"""

if not os.path.exists("./data"):
    os.makedirs("./data")

path = "https://raw.githubusercontent.com/frandiego/data/master/beijing_air_quality_train.csv"
pd.read_csv(path).to_excel('./data/beijing_air_quality_train.xlsx',sheet_name='raw_data')

path = "https://raw.githubusercontent.com/frandiego/data/master/beijing_air_quality_validation.csv"
pd.read_csv(path).to_excel('./data/beijing_air_quality_validation.xlsx',sheet_name='raw_data')

!ls data

df = pd.read_excel('./data/beijing_air_quality_train.xlsx',sheet_name='raw_data',index_col=0)

df.head()

"""## 2. Tidy Data

### 2.1. First look
##### At a first look we can see that there is NaN values in the target, but this does not mean that the variable is not clean, so let's keep them there What we have to do is to clean columns, everything in lower case and pm2.5 is going to be called `particular_matter`
$$Exercise$$
"""

df.rename(columns = {i:i.lower() if i !='pm2.5' else 'particular_matter' for i in df.columns },inplace=True)

df.head()

"""## 2.2. Remove number of ofbservation `no`"""

df.drop('no',axis=1,inplace=True)

df.head()

"""## 2.3. Remove columns with no available information"""

df['particular_matter'].isna().mean()

df = df[~df['particular_matter'].isna()]

"""## 3. Transformation

### 3.1 Create a columns with the date and coerce it to be a datetime 
#### hints 
* `year * 10000 + month * 100 + date`
* `datetime.strptime('20100102','%Y%m%d')`
"""

df.dtypes

df['date'] = df['year'] * 10000 + df['month'] * 100 + df['day']

df['date'] = df['date'].map(lambda i: datetime.strptime(str(i),'%Y%m%d'))

"""### 3.2 Use the column date to take the `month` and the `isoweekday`
#### hints:
* df['date'].dt.month
* datetime.isoweekday()
"""

df['month'] = df['date'].dt.month

df['isoweekday'] = df['date'].map(lambda i: i.isoweekday())

"""### 3.3 Coerce `month` to be a categorical with categories `[1,2, ..., 12]` and  `isoweekday` to be a ordered categorical with categories `[1,2, ..., 12]` and  `isoweekday` to be another ordered categorical with categories `[1, 2, ..., 7]`
#### hints:
* pd.Categorical()
"""

df['month'] = pd.Categorical(df['month'],categories=list(range(1,13)),ordered=True)

df['isoweekday'] = pd.Categorical(df['isoweekday'],categories=list(range(1,8)),ordered=True)

"""### 3.4 Do the same with the column `hour`, and column `day`"""

df['hour'] = pd.Categorical(df['hour'],categories=list(range(0,24)),ordered=True)

df['day'] = pd.Categorical(df['day'],categories=list(range(1,32)),ordered=True)

"""## 4. Let's explore the effect of the direction of the wind in the pollution
#### variables `cbwd` (Combined wind direction) and `particular_matter` (pollution)
"""

joypy.joyplot(data=df,column='particular_matter',by='cbwd')

joypy.joyplot(data=df[df['particular_matter']<300],column='particular_matter',by='cbwd')

ggplot(df,aes(x='particular_matter')) + geom_density(aes(fill='factor(cbwd)'),alpha=0.3)

ggplot(df,aes(x='particular_matter')) + geom_density(fill='black') + facet_wrap('cbwd',scales='free_x')

ggplot(df[df.particular_matter<=250],aes(x='factor(cbwd)',y='particular_matter')) + \
geom_boxplot() +\
geom_hline(yintercept = 100, color='red')+ theme_minimal()

ggplot(df,aes(x='factor(cbwd)',y='particular_matter')) + \
geom_bar(stat='summary',fun_y=np.mean) +\
geom_hline(yintercept = 100, color='red') + theme_minimal()

"""### 4.1 Create a dummy variable called `northern_wind` to check if wind comes from north or not. Then coerce it to be a categorical with categories [0,1]"""

df['northern_wind'] = df['cbwd'].str.startswith('N').astype(int)

df['northern_wind'] = pd.Categorical(df['northern_wind'],categories=[0,1])

"""## 4.2 Create a dummy variable called `eastern_wind` to onehotencode the variable `cbwd` but with more information than a simple OneHot Encoder"""

df['eastern_wind'] = df['cbwd'].str.endswith('E').astype(int)
df['eastern_wind'] = pd.Categorical(df['eastern_wind'],categories=[0,1])

"""# 5. Select those features and save it into a `feather` file
#### hint. (`pd.to_feather`, `pd.read_feather`)
"""

features = ['year','month','isoweekday','day','hour','dewp',
            'temp','pres','is','ir','northern_wind','eastern_wind', 
           'particular_matter']
df = df[features].reset_index(drop=True)
print(df.dtypes)
df.head()

df.to_feather('./tidy_train_data.feather')

"""### 6. Create a function `transform` that takes a `csv_path` save a feather in `feather_path` with the data clean and tidy"""

